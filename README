Arching Kaos Infochain
======================

A way of spliting messages into transactions of ARCHINGKAOS asset on Stellar Network and restruct them from an unordered/transaction list.

See following notes on how this is achieved.

Requirements
------------
Someone needs an amount of ARCHINGKAOS asset to make a transaction. Read ASSET_DISTRIBUTION for info on this. Apart from getting ARCHINGKAOS tokens, you can also deploy your own asset and adjust the code accordingly.

Demonstration
-------------
1. Explorer
Visit the latest version through https://explorer.arching-kaos.net

2. Mixtape parser
Latest version of the ./static/mixtape-parser.html can be added to IPFS and viewed from a gateway through a browser.

If you are not part of the swarm, it's better to use https://ipfs.arching-kaos.com gateway. You can visit the latest version of the swarm by going to this address:

https://ipfs.arching-kaos.com/ipfs/QmZFkZ1vSaRSKgp9t1asAbLVsbm2L9mDgry3v4cNR4AWwf

How it works/What is done
-------------------------
To make a transaction containing a message we need to know one piece of information that packs inside it, more pieces of information.

As Whitepapers mentions, into a transaction of ARCHINGKAOS asset, there is a part (1/5) of an IPFS CID.
When every part of this IPFS CID is been sent via ARCHINGKAOS asset, it can get restructured to the original.

How is organized
----------------
src/		provides the source code, you need to compile nothing, it's bash and python scripts
docs/		gathers all the documents needed (WIP)
static/		provides html files that you can add to IPFS and load from an IPFS gateway. They are rendering the chain.
checks/		provides with python written checks of file types
tests/		provides tests of the algorithm
drafts/		provides some drafts written (to be deleted)
LICENSE		the license of the repository
README		duh, you are reading it
ROADMAP		provides a list of tasks to be solved
Whitepaper	an extended document, overviewing the problem, the solution and its properties and impact
clean.sh	clean up some files that are popping up when we run the code

It also comes with a virtual environment tools and settings so it can be easier for someone to work with the repo.


Pack a ZBLOCK
-------------
This IPFS CID is called ZBLOCK (z block <- ze block <- the block). It should be a JSON object with two IPFS CIDs:
1. IPFS CID of a BLOCK ("block")
2. IPFS CID of a detached PGP/GPG signature of the BLOCK ("block_signature")

See pack_z_block.sh script

BLOCK
-----
A BLOCK should contain some key data:
- an action
- a data JSON object relative to the action
- the detached signature of the data JSON object
- the gpg key of the signer/contributor of the piece of information
- the previous ZBLOCK

ACTION
------
Can be literally anything! A convinient way to use it is refering to an object or a subject and to a verb using URL like scheme:
e.g.: mixtape/add

DATA
----
Can be literally anything, but is specified by the ACTION's handler

How do we transfer a ZBLOCK's IPFS CID ?
----------------------------------------
You can directly go to edcode.py using the function encode(IPFS CID)

Example:

We have the following IPFS hash

QmZFkZ1vSaRSKgp9t1asAbLVsbm2L9mDgry3v4cNR4AWwf

We mix it with dots in this way:

...QmZFkZ1vSaRSKgp9t1asAbLVsbm2L9mDgry3v4cNR4AWwf

We then split it like this:

...QmZFkZ1vSaRSKgp9t1asAbLVsbm2L9mDgry3v4cNR4AWwf
..nYyBBWxB74N4
c5SBnJMVAiMN..
RcGu6x1AwQH... split it

We mix its parts, 2 parts at a time:

...QmZFkZ1vSaRSKgp9t1asAbLVsbm2L9mDgry3v4cNR4AWwf
...QmZFkZ1vSaRSKgp9t1asAbLVsbm2L9mDgry3v4cNR4AWwf
...QmZFkZ1vSaRSKgp9t1asAbLVsbm2L9mDgry3v4cNR4AWwf
..nYyBBWxB74N4c5SBnJMVAiMN..
..nYyBBWxB74N4RcGu6x1AwQH...  mix it

We send each the 5 strings:
send tx 1 2 3 4 5

Who did what?
-------------
Sender is NOT the owner of the data, is the contributor/distributor. Artists should be able to distribute their work.

To get the info back you need to decode the list of transactions on ARCHINGKAOS asset

To be more specific, see the edcode.decode(TRANSACTIONS) function from edcode.py file

On reverse now
--------------
Download and extract the ZBLOCK
-------------------------------
See dlx.py


Verify that all the data is signed with the packed key
------------------------------------------------------
This could provide us with some authenticity that the actual key did post, not some random one which posted some public key.

TODO

Do extra checks (if needed)
---------------------------
Example check at flac_check.py and ogg_check.py

Create a procedure that bonds everything in a super app
--------------------------------------------------------
This would be really nice to have. Imagine that you could have news, mixtapes, announcements, blogs, videos, whatever and render them on one page with a nice UI.

TODO
